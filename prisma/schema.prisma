// schema.prisma

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Enum for Role - Define it before the models
enum RoleEnum {
  super
  admin
  staff
  patient
}

enum Status {
  emailRegistered
  profileSubmitted
  active
  inactive
  suspended
  deleted
}

// Organization model
model Organization {
  id        Int      @id @default(autoincrement())
  name      String
  shortName String
  address   String
  image     String
  branches  Branch[]  // One-to-many relationship with Branches
  roles     Role[]    // One-to-many relationship with Roles
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Branch model
model Branch {
  id            Int         @id @default(autoincrement())
  name          String
  address       String?
  organization  Organization @relation(fields: [organizationId], references: [id])
  organizationId Int         // Foreign key to Organization
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  User User[]
}

// Role model
model Role {
  id             Int           @id @default(autoincrement())
  code           String
  name           String
  status         Boolean       @default(true)
  organization   Organization  @relation(fields: [organizationId], references: [id])
  organizationId Int           // Foreign key to Organization
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

// Token model
model Token {
  id            Int        @id @default(autoincrement())
  token         String
  loginDetail   LoginDetail @relation(fields: [loginDetailId], references: [id])
  loginDetailId Int
  loginAgent    String     @default("patient")
  deviceId      String
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

// LoginDetail model
model LoginDetail {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  password  String
  role      RoleEnum  @default(patient)   // Use the RoleEnum
  status    Status    @default(emailRegistered)  // Use the Status enum
  userId    Int?
  user      User?     @relation(fields: [userId], references: [id])
  tokens    Token[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

// User model
model User {
  id          Int       @id @default(autoincrement())
  firstName   String
  lastName    String
  image       String?
  branchId    Int
  branch      Branch    @relation(fields: [branchId], references: [id])
  loginDetails LoginDetail[] // One-to-many relationship with LoginDetails
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}
